@page "/vehicleType"
@using Models
@using Services
@inject VehicleTypeService VehicleService
@inject IJSRuntime JS

<h3>Vehicle List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
    <div class="mb-3">
        <input type="text" placeholder="Search Vehicle Name" @bind="filterVehicleName" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-success mt-2" @onclick="ShowAddModal">Add Vehicle</button>
    </div>

    <table class="table-striped table">
        <thead>
            <tr>
                <th>Vehicle ID</th>
                <th>Vehicle Name</th>
                
                <th>Actions</th>
            </tr>
        </thead>
        @if (vehicle == null || !vehicle.Any())
        {
            <div style="text-align:center;left:300px; position:relative; font-weight: bold; margin-top: 20px; color:red">
                <p>No vehicles available.</p>
            </div>
      
        }
        else{
        <tbody>
            @foreach (var vehicle in vehicle)
            {
                <tr>
                    <td>@vehicle.VehicleTypeId</td>
                    <td>@vehicle.VehicleTypeName</td>
                 
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowEditModal(vehicle)">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(vehicle.VehicleTypeId)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        }
    </table>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

<VehiclesTypeAddEdit VehicleType="selectedVehicle"
                Title="@modalTitle"
                ButtonText="@modalButtonText"
                IsVisible="@isModalVisible"
                OnClose="CloseModal"
                OnSubmit="SaveVehicle" />

@code {
    private List<VehicleType> vehicle = new();
    private VehicleType selectedVehicle = new VehicleType();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterVehicleName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    // Sorting variables
    private string sortColumn = "VehicleId";
    private bool isSortDescending = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await VehicleService.GetVehicleTypesAsync(currentPage, pageSize);
            vehicle = response.VehicleTypes;
            totalPages = response.TotalPages;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading vehicles: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadVehicles();
    }

    private void ShowAddModal()
    {
        selectedVehicle = new VehicleType();
        modalTitle = "Add Vehicle";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(VehicleType vehicle)
    {
        selectedVehicle = new VehicleType
        {
                VehicleTypeId = vehicle.VehicleTypeId,
                VehicleTypeName = vehicle.VehicleTypeName,
       
        };
        modalTitle = "Edit Vehicle";
        modalButtonText = "Save";
        isModalVisible = true;
    }

    private async Task SaveVehicle()
    {
        try
        {
            if (selectedVehicle.VehicleTypeId == 0) // Add new vehicle
            {
                await VehicleService.AddVehicleTypeAsync(selectedVehicle);
            }
            else // Update existing vehicle
            {
                await VehicleService.UpdateVehicleTypeAsync(selectedVehicle);
            }

            await LoadVehicles(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving vehicle: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int vehicleId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this vehicle?");
        if (isConfirmed)
        {
            try
            {
                await VehicleService.DeleteVehicleTypeAsync(vehicleId);
                vehicle = vehicle.Where(v => v.VehicleTypeId != vehicleId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting vehicle: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task ApplySorting(string column)
    {
        if (sortColumn == column)
        {
            isSortDescending = !isSortDescending; // Toggle sort direction
        }
        else
        {
            sortColumn = column;
            isSortDescending = false; // Default to ascending for a new column
        }

        currentPage = 1; // Reset to the first page on sorting
        await LoadVehicles();
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadVehicles();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadVehicles();
        }
    }
}
