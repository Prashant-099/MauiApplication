@page "/login"

<div class="login-container">
    <div class="login-card">
        <img src="css\img/freightbook.jpg" alt="App Logo" class="app-logo" />
        <h3>Welcome Back</h3>
        <p class="subtitle">Login to access your account</p>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }

        <p class="footer-text">Don't have an account? <a href="">Sign Up</a></p>
    </div>
</div>

<style>
    body {
        margin: 0;
        font-family: "Arial", sans-serif;
        background: linear-gradient(135deg, #6a11cb, #2575fc);
        color: #fff;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 1.5rem;
    }

    .login-card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        padding: 2rem;
        max-width: 360px;
        width: 100%;
        text-align: center;
    }

    .app-logo {
        width: 80px;
        margin-bottom: 1rem;
        border-radius: 50%;
    }

    .login-card h3 {
        color: #333;
        margin-bottom: 0.5rem;
    }

    .login-card .subtitle {
        color: #666;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
        text-align: left;
    }

        .form-group label {
            font-size: 0.85rem;
            color: #555;
            font-weight: bold;
            margin-bottom: 0.5rem;
            display: block;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border-radius: 8px;
        border: 1px solid #ddd;
        font-size: 0.9rem;
        box-sizing: border-box;
    }

        .form-control:focus {
            border-color: #6a11cb;
            outline: none;
        }

    .btn-primary {
        background: linear-gradient(135deg, #6a11cb, #2575fc);
        color: white;
        border: none;
        padding: 0.75rem;
        font-size: 1rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2575fc, #6a11cb);
            transform: scale(1.02);
        }

    .error-message {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 1rem;
    }

    .footer-text {
        margin-top: 1.5rem;
        font-size: 0.9rem;
        color: #666;
    }

        .footer-text a {
            color: #2575fc;
            text-decoration: none;
        }

            .footer-text a:hover {
                text-decoration: underline;
            }
</style>

@code {
    @using MauiAppFB.Services
    @using System.ComponentModel.DataAnnotations
    //private string email = string.Empty;
    //private string password = string.Empty;
    private string errorMessage = string.Empty;
    private LoginModel loginModel = new LoginModel();


    [Inject] private AuthService AuthService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }


    private async Task HandleLogin()
    {
        try
        {
            errorMessage = string.Empty;

            // Authenticate and get the token
            var token = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

            // Save the token securely
            await SecureStorage.SetAsync("authToken", token);

            // Navigate to the dashboard
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class LoginModel
    {
        [Required (ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Enter a valid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
