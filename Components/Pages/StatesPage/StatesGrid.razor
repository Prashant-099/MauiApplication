@page "/state"
@using Models
@using Services
@inject StatesService StateService
@inject IJSRuntime JS

<h3>State List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
    <div class="mb-3">
        <input type="text" placeholder="Search State Name" @bind="filterStateName" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-success mt-2" @onclick="ShowAddModal">Add State</button>
    </div>

    <table class="table-striped table">
        <thead>
            <tr>
                <th>State ID</th>
                <th>State Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        @if (states == null || !states.Any())
        {
            <div style="text-align:center;left:300px; position:relative; font-weight: bold; margin-top: 20px; color:red">
                <p>No States available.</p>
            </div>
          
        }
        else{
        <tbody>
            @foreach (var state in states)
            {
                <tr>
                    <td>@state.StateId</td>
                    <td>@state.StateName</td>

                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowEditModal(state)">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(state.StateId)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        }
    </table>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

<StateAddEdit State="selectedState"
Title="@modalTitle"
ButtonText="@modalButtonText"
IsVisible="@isModalVisible"
OnClose="CloseModal"
OnSubmit="SaveState" />

@code {
    private List<States> states = new();
    private States selectedState = new States();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterStateName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadStates();
    }

    private async Task LoadStates()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await StateService.GetStatesAsync(currentPage, pageSize);
            if (response != null)
            {
                states = response; // Directly assign the list of states
            }
            else
            {
                errorMessage = "No states found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading states: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadStates();
    }

    private void ShowAddModal()
    {
        selectedState = new States();
        modalTitle = "Add State";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(States state)
    {
        selectedState = new States
        {
            StateId = state.StateId,
            StateName = state.StateName,
          
        };
        modalTitle = "Edit State";
        modalButtonText = "Save";
        isModalVisible = true;
    }

    private async Task SaveState()
    {
        try
        {
            if (selectedState.StateId == 0) // Add new state
            {
                await StateService.AddStateAsync(selectedState);
            }
            else // Update existing state
            {
                await StateService.UpdateStateAsync(selectedState);
            }

            await LoadStates(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving state: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int stateId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this state?");
        if (isConfirmed)
        {
            try
            {
                await StateService.DeleteStateAsync(stateId);
                states = states.Where(s => s.StateId != stateId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting state: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadStates();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadStates();
        }
    }
}
