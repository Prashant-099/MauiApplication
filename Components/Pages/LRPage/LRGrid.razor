@page "/LrGRid"
@using System.Collections.Generic;
@using MauiAppFB.Models
@using MauiAppFB.Components
@using MauiAppFB.Services
@inject LRService LRGridService
@inject IJSRuntime JS



@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
    <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
        <input type="text" placeholder="Search LRGrid Name" @bind="filterLRGridName" style="width:80%;" class="form-control" />
        <button class="rounded-circle d-flex align-items-center justify-content-center"
        style="width: 40px; height: 40px;" @onclick="NavigateToLRGrid">
            <img src="Icon/add.png" style="height:20px;" />
        </button>
        <select id="pageSizeSelect" class="form-select" style="width: auto; display: inline-block;"
                @onchange="OnPageSizeChanged">
            <option value="5" selected="@IsSelectedPageSize(5)">5</option>
            <option value="10" selected="@IsSelectedPageSize(10)">10</option>
            <option value="10" selected="@IsSelectedPageSize(100)">100</option>
            <option value="20" selected="@IsSelectedPageSize(200)">200</option>
            <option value="50" selected="@IsSelectedPageSize(500)">500</option>
        </select>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    
                    <th>LR Nostr</th>
                    <th>Container1</th>
                    <th>Container2</th>
                    <th>Consignee</th>
                    <th>Consignor</th>
                    <th>Actions</th>
                </tr>
            </thead>
            @if (LRGrids == null || !LRGrids.Any())
            {
                <div class="no-data-message">
                    <p>No LR available.</p>
                </div>
            }
            else
            {
                <tbody>
                    @foreach (var lrgrid in FilteredLRGrids)
                    {
                        <tr>
                            
                            <td>@lrgrid.Lr_Nostr</td>
                            <td>@lrgrid.LrContainer1</td>
                            <td>@lrgrid.LrContainer2</td>

                            <td>@lrgrid.Consignee_Name</td>
                            <td>@lrgrid.Consignor_Name</td>
                            <td class="actions">
                                <button  @onclick="() => ShowEditModal(lrgrid)">
                                    <img src="Icon/icons8-edit-50.png" style="height:20px;" />
                                </button>
                                <button @onclick="() => ConfirmDelete(lrgrid.LrID)">
                                    <img src="Icon/icons8-delete-50.png" style="height:20px;" />
                                </button>
                                <button @onclick="() => PRINT(lrgrid)">
                                    <img src="Icon/printer.png" style="height:20px;" />
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span >Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}



@code {


    [Inject] private NavigationManager NavigationManager { get; set; }

    private string? reportPath;

    private void NavigateToLRGrid()
    {
        NavigationManager.NavigateTo("/LRAddEdit");
    }
    private async Task OnPageSizeChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)

    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            pageSize = newSize;
            // currentPage = 1; // Reset to the first page
            await LoadLRGrids();
        }
    }

    private string? IsSelectedPageSize(int size) => pageSize == size ? "selected" : null;




    private async Task PRINT(Models.Lr lrgrid)
    {
        try
        {
            // Load the report definition
            var report = await Reportservice.LoadChallanReportAsync();
            if (report == null)
            {
                Console.WriteLine("Report is null");
                return;
            }

            // Load your data by LR ID

            var reportdata = await LRGridService.GetLRsidAsync(lrgrid.LrID);

            if (reportdata == null)
            {
                Console.WriteLine("Report data is null");
                return;
            }

            // Bind the data to the report
            report.DataSource = reportdata;

        

            // Export to PDF
            using var ms = new MemoryStream();
            report.ExportToPdf(ms);
            var pdfBytes = ms.ToArray();

            // Save and open the PDF
            var fileName = $"challan_{lrgrid.LrID}.pdf";
            var filePath = Path.Combine(FileSystem.CacheDirectory, fileName);
            File.WriteAllBytes(filePath, pdfBytes);

            await Launcher.Default.OpenAsync(new OpenFileRequest
                {
                    File = new ReadOnlyFile(filePath)
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine("Export failed: " + ex.ToString());
        }
    }


    



    private List<Lr> LRGrids = new();
    private Lr selectedLRGrid = new Lr();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterLRGridName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages =1;
    private int pageSize = 5;
    private IEnumerable<Lr> FilteredLRGrids =>
    string.IsNullOrWhiteSpace(filterLRGridName)
        ? LRGrids
        : LRGrids.Where(lr =>
            (!string.IsNullOrEmpty(lr.Vehicle_No) && lr.Vehicle_No.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.Party_Name) && lr.Party_Name.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.Consignor_Name) && lr.Consignor_Name.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.Consignee_Name) && lr.Consignee_Name.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.Lr_Nostr) && lr.Lr_Nostr.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.LrContainer1) && lr.LrContainer1.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(lr.LrContainer2) && lr.LrContainer2.Contains(filterLRGridName, StringComparison.OrdinalIgnoreCase))
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadLRGrids();
        // try
        // {
        //     var reportPath = await Reportservice.LoadChallanReportAsync();
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = ex.Message;
        // }
        // finally
        // {
        //     isLoading = false;
        // }
    }

    private async Task LoadLRGrids()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await LRGridService.GetLRsAsync(currentPage, pageSize);
            if (response != null)
            {
                LRGrids = response.challans; // Assuming LRGrids is the list to hold the fetched data
               totalPages = response.TotalPages;        // totalPages = (int)Math.Ceiling((double)totalCount / pageSize); // if your API provides the total count
            }
            else
            {
                errorMessage = "No LRGrids found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading LRGrids: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadLRGrids();
    }

    private void ShowAddModal()
    {
        selectedLRGrid = new Models.Lr();
        modalTitle = "Add LRGrid";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(Models.Lr lrgrid)
    {
        try
        {
            if (lrgrid?.LrID > 0) // Ensure LRId exists
            {


                selectedLRGrid = new Models.Lr
                    {
                        LrID = lrgrid.LrID,
                        LrNo = lrgrid.LrNo,

                        LrNostr = lrgrid.LrNostr,
                        LrContainer1 = lrgrid.LrContainer1

                    };
                NavigationManager.NavigateTo($"/LRAddEdit/{lrgrid.LrID}");

                modalButtonText = "Save";

            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading LRGrids: {ex.Message}";
        }

       
    }

    private async Task SaveLRGrid()
    {
        try
        {
            if (selectedLRGrid.LrID == 0) // Add new LRGrid
            {
                await LRGridService.AddLRAsync(selectedLRGrid);
            }
            else // Update existing LRGrid
            {
                await LRGridService.UpdateLRAsync(selectedLRGrid);
            }

            await LoadLRGrids(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving LRGrid: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int lrgridId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this LRGrid?");
        if (isConfirmed)
        {
            try
            {
                await LRGridService.DeleteLRAsync(lrgridId);
                LRGrids = LRGrids.Where(l => l.LrID != lrgridId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting LRGrid: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadLRGrids();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadLRGrids();
        }
    }
}
