@page "/LrGRid"
@using System.Collections.Generic;
@using MauiAppFB.Models
@using MauiAppFB.Components
@using MauiAppFB.Services
@inject LRService LRGridService
@inject IJSRuntime JS

<h3>LR  List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
    <div class="mb-3">
        <input type="text" placeholder="Search LRGrid Name" @bind="filterLRGridName" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-success mt-2" @onclick="NavigateToLRGrid">
            Add LRGrid
        </button>
        <button class="btn btn-success mt-2" @onclick="PRINT">
            PRINT
        </button>
    </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>LR ID</th>
                    <th>LR No</th>
                    <th>LR Nostr</th>
                    <th>Container1</th>
                    <th>Container2</th>
                    <th>Consignee</th>
                    <th>Consignor</th>
                    <th>Actions</th>
                </tr>
            </thead>
            @if (LRGrids == null || !LRGrids.Any())
            {
                    <div class="no-data-message">
                        <p>No LR available.</p>
                    </div>
            }
            else
            {
                    <tbody>
                    @foreach (var lrgrid in LRGrids)
                    {
                <tr>
                        <td>@lrgrid.LrID</td>
                        <td>@lrgrid.LrNo</td>
                        <td>@lrgrid.Lr_Nostr</td>
                    <td>@lrgrid.LrContainer1</td>
                        <td>@lrgrid.LrContainer2</td>
                        
                        <td>@lrgrid.Consignee_Name</td>
                        <td>@lrgrid.Consignor_Name</td>
                        <td class="actions">
                        <button  @onclick="() => ShowEditModal(lrgrid)">
                                <img src="Icon/icons8-edit-50.png" style="height:25px;" />
                                        </button>
                                        <button @onclick="() => ConfirmDelete(lrgrid.LrID)">
                                            <img src="Icon/icons8-delete-50.png" style="height:25px;" />
                                        </button>
                                    </td>
                                </tr>
                    }
                    </tbody>
            }
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span >Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}



@code {


    [Inject] private NavigationManager NavigationManager { get; set; }



    private void NavigateToLRGrid()
    {
        NavigationManager.NavigateTo("/LRAddEdit");
    }

    private void PRINT()
    {
        NavigationManager.NavigateTo("/print");
    }





    private List<Lr> LRGrids = new();
    private Lr selectedLRGrid = new Lr();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterLRGridName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadLRGrids();
    }

    private async Task LoadLRGrids()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await LRGridService.GetLRsAsync(currentPage, pageSize);
            if (response != null)
            {
                LRGrids = response.challans; // Assuming LRGrids is the list to hold the fetched data
                                            // totalPages = response.TotalPages;        // totalPages = (int)Math.Ceiling((double)totalCount / pageSize); // if your API provides the total count
            }
            else
            {
                errorMessage = "No LRGrids found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading LRGrids: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadLRGrids();
    }

    private void ShowAddModal()
    {
        selectedLRGrid = new Models.Lr();
        modalTitle = "Add LRGrid";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(Models.Lr lrgrid)
    {
        try
        {
            if (lrgrid?.LrID > 0) // Ensure LRId exists
            {


                selectedLRGrid = new Models.Lr
                    {
                        LrID = lrgrid.LrID,
                        LrNo = lrgrid.LrNo,

                        LrNostr = lrgrid.LrNostr,
                        LrContainer1 = lrgrid.LrContainer1

                    };
                NavigationManager.NavigateTo($"/LRAddEdit/{lrgrid.LrID}");

                modalButtonText = "Save";

            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading LRGrids: {ex.Message}";
        }

       
    }

    private async Task SaveLRGrid()
    {
        try
        {
            if (selectedLRGrid.LrID == 0) // Add new LRGrid
            {
                await LRGridService.AddLRAsync(selectedLRGrid);
            }
            else // Update existing LRGrid
            {
                await LRGridService.UpdateLRAsync(selectedLRGrid);
            }

            await LoadLRGrids(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving LRGrid: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int lrgridId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this LRGrid?");
        if (isConfirmed)
        {
            try
            {
                await LRGridService.DeleteLRAsync(lrgridId);
                LRGrids = LRGrids.Where(l => l.LrID != lrgridId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting LRGrid: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadLRGrids();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadLRGrids();
        }
    }
}
