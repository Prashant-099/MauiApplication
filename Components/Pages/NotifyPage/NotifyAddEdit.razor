@page "/NotifyAddEdit"
@using Models
@inject IJSRuntime JS

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Notification" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                                <label for="NotifyTitle"> NotifyCity:</label>
                                <InputText id="NotifyTitle" @bind-Value="Notification.NotifyCity" class="form-control" />
                        </div>
                        <div class="mb-3">
                                <label for="NotifyMessage">NotifyContactNo :</label>
                                <InputText id="NotifyMessage" @bind-Value="Notification.NotifyContactNo" class="form-control" />
                        </div>
                        <div class="mb-3">
                                    <label for="NotifyType">NotifyGstNo:</label>
                                    <InputText id="NotifyType" @bind-Value="Notification.NotifyGstNo" class="form-control" />
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-primary">@ButtonText</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Notify Notification { get; set; } // Assuming a Notification model exists
    [Parameter] public string Title { get; set; } = "Add Notification";
    [Parameter] public string ButtonText { get; set; } = "Add";
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnSubmit.InvokeAsync();
    }

    private async Task CloseModal() => await OnClose.InvokeAsync();
}
