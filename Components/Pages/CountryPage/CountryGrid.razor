@page "/country"
@using Models
@using Services
@inject CountryService CountryService
@inject IJSRuntime JS

<h3>Country List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
    <div class="mb-3">
        <input type="text" placeholder="Search Country Name" @bind="filterCountryName" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-success mt-2" @onclick="ShowAddModal">Add Country</button>
    </div>

    <table class="table-striped table">
        <thead>
            <tr>
                
                <th>Country Name</th>
                <th>Country Code</th>
                <th>Remarks</th>
                <th>Actions</th>
            </tr>
        </thead>
        @if (Countries == null || !Countries.Any())
        {
            <div style="text-align:center;left:300px; position:relative; font-weight: bold; margin-top: 20px; color:red">
                <p>No countries available.</p>
            </div>
        
        }
        else{
        <tbody>
            @foreach (var country in Countries)
            {
                <tr>
                  
                    <td>@country.CountryName</td>
                    <td>@country.CountryCode</td>
                    <td>@country.CountryRemarks</td>
                    <td>
                        <button  @onclick="() => ShowEditModal(country)">
                                <img src="Icon/icons8-edit-50.png" style="height:25px" />
                        </button>
                        <button  @onclick="() => ConfirmDelete(country.CountryId)">
                                 <img src="Icon/icons8-delete-50.png"  style="height:25px" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        }
    </table>

    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

<CountryAddEdit Country="selectedCountry"
                Title="@modalTitle"
                ButtonText="@modalButtonText"
                IsVisible="@isModalVisible"
                OnClose="CloseModal"
                OnSubmit="SaveCountry" />

@code {
    private List<Country> Countries = new();
    private Country selectedCountry = new Country();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterCountryName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await CountryService.GetCountriesAsync(currentPage, pageSize);
            if (response != null)
            {
                Countries = response; // Assuming countries is the list to hold the fetched data
             //  totalPages = (int)Math.Ceiling((double)totalCount / pageSize); // if your API provides the total count
            }
            else
            {
                errorMessage = "No countries found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadCountries();
    }

    private void ShowAddModal()
    {
        selectedCountry = new Country();
        modalTitle = "Add Country";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(Country country)
    {
        selectedCountry = new Country
            {
                CountryId = country.CountryId,
                CountryName = country.CountryName,
                CountryCode = country.CountryCode,
                CountryRemarks = country.CountryRemarks
            };
        modalTitle = "Edit Country";
        modalButtonText = "Save";
        isModalVisible = true;
    }

    private async Task SaveCountry()
    {
        try
        {
            if (selectedCountry.CountryId == 0) // Add new country
            {
                await CountryService.AddCountryAsync(selectedCountry);
            }
            else // Update existing country
            {
                await CountryService.UpdateCountryAsync(selectedCountry);
            }

            await LoadCountries(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving country: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int countryId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this country?");
        if (isConfirmed)
        {
            try
            {
                await CountryService.DeleteCountryAsync(countryId);
                Countries = Countries.Where(c => c.CountryId != countryId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting country: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadCountries();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadCountries();
        }
    }
}
