 @page "/CompanyAddEdit"
@using Models
@using Services

@inject StatesService StateService
@inject CompanyService CompanyService
@inject IJSRuntime JS

@if (IsVisible)
{
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@Title</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@Company" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="CompanyName">Company Name:</label>
                                <InputText id="CompanyName" @bind-Value="Company.CompanyName" class="form-control" />
                            </div>
                        <div class="mb-3">
                            <label for="CompanyPrintName">Company Print Name:</label>
                            <input id="CompanyPrintName" value="@Company.CompanyName" class="form-control" readonly />

                        </div>
                            <div class="mb-3">
                            <label for="CompanyAddress1">Address1:</label>
                            <InputText id="CompanyAddress1" @bind-Value="Company.CompanyAddress1" class="form-control" />
                            </div>
                        <div class="mb-3">
                            <label for="CompanyAddress2">Address2:</label>
                            <InputText id="CompanyAddress2" @bind-Value="Company.CompanyAddress2" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyAddress3">Address3:</label>
                            <InputText id="CompanyAddress3" @bind-Value="Company.CompanyAddress3" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyCity">City:</label>
                            <InputText id="CompanyCity" @bind-Value="Company.CompanyCity" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyCountry">Country:</label>
                            <InputText id="CompanyCountry" @bind-Value="Company.CompanyCountry" class="form-control" />
                        </div>
                         <div class="mb-3">
                         <label for="AccountStateId" style="display: block; font-weight: bold;">State:</label>
                            <InputSelect id="AccountStateId" @bind-Value="Company.CompanyStateId" class="form-control" @onclick="Loadstate"
                                             style="width: 100%;">
                                    <option value="Select State">Select State</option>
                                    @foreach (var states in states)

                                    {

                                        <option value="@states.StateId">@states.StateName</option>

                                    }



                                </InputSelect>
                               </div>
                        <div class="mb-3">
                            <label for="companypanno">panno:</label>
                            <InputText id="companypanno" @bind-Value="Company.companypanno" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyGstin">Gstin:</label>
                            <InputText id="CompanyGstin" @bind-Value="Company.CompanyGstin" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyMsmeNo">MsmeNo:</label>
                            <InputText id="CompanyMsmeNo" @bind-Value="Company.CompanyMsmeNo" class="form-control" />
                        </div>
                            <div class="mb-3">
                                <label for="CompanyRemarks">Remarks:</label>
                                <InputText id="CompanyRemarks" @bind-Value="Company.CompanyRemarks" class="form-control" />
                            </div>
                        <div class="mb-3">
                            <label for="CompanyLogo">logo:</label>
                            <InputFile OnChange="HandleFileSelected" class="form-control" />
                            @if (!string.IsNullOrEmpty(Company.CompanyLogo))
                            {
                                string base64Image = "data:image/jpeg;base64," + Company.CompanyLogo;
                                <img src="@base64Image" alt="Company Logo" style="max-width: 100px; max-height: 100px;" />
                            }

                                       
                        </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary">@ButtonText</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    [Parameter] public Company Company { get; set; } 
    [Parameter] public string Title { get; set; } = "Add Company";
    [Parameter] public string ButtonText { get; set; } = "Add";
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    // [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback<IBrowserFile?> OnSubmit { get; set; }
    private Company selectedCompany = new Company();
    private List<States> states = new();
    private string? errorMessage;
    private IBrowserFile file;
    private async Task HandleValidSubmit()
    {
        await OnSubmit.InvokeAsync(file);
    }
    private async Task Loadstate()
    {
        var response = await StateService.GetStatesAsync();
        states = response.states;
    }
    // private async Task SaveCompany(IBrowserFile file)
    // {
    //     try
    //     {
    //         if (Company.CompanyId == 0) // Add new company
    //         {
    //             await CompanyService.AddCompanyAsync(Company, file);
    //         }
    //         else // Update existing company
    //         {
    //             await CompanyService.UpdateCompanyAsync(Company, file);
    //         }

    //         // await LoadCompanies(); // Refresh the list
    //         CloseModal();
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Error saving company: {ex.Message}";
    //     }
    // }
    private async Task CloseModal() => await OnClose.InvokeAsync();
 



    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    
    {
         file = e.File;
        try
        {
           
            if (file != null)
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                var stream = file.OpenReadStream(10 * 1024 * 1024);
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
               

                Company.CompanyLogo = fileName; // Just keeping it in sync if needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Image load failed: {ex.Message}");
        }

    }
  
}