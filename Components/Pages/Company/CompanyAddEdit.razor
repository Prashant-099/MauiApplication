@page "/CompanyAddEdit"
@using Models
@using Services
@inject CompanyService CompanyService
@inject IJSRuntime JS

@if (IsVisible)
{
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@Title</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@Company" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="CompanyName">Company Name:</label>
                                <InputText id="CompanyName" @bind-Value="Company.CompanyName" class="form-control" />
                            </div>
                            <div class="mb-3">
                            <label for="CompanyAddress1">Company Code:</label>
                            <InputText id="CompanyAddress1" @bind-Value="Company.CompanyAddress1" class="form-control" />
                            </div>
                        <div class="mb-3">
                            <label for="CompanyAddress2">Company Code:</label>
                            <InputText id="CompanyAddress2" @bind-Value="Company.CompanyAddress2" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyAddress3">Company Code:</label>
                            <InputText id="CompanyAddress3" @bind-Value="Company.CompanyAddress3" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label for="CompanyGstin">Company Code:</label>
                            <InputText id="CompanyGstin" @bind-Value="Company.CompanyGstin" class="form-control" />
                        </div>
                            <div class="mb-3">
                                <label for="CompanyRemarks">Remarks:</label>
                                <InputText id="CompanyRemarks" @bind-Value="Company.CompanyRemarks" class="form-control" />
                            </div>
                        <div class="mb-3">
                            <label for="CompanyLogo">logo:</label>
                            <Input type="""" OnChange="HandleFileSelected" class="form-control" />
                            @if (!string.IsNullOrEmpty(Company.CompanyLogo))
                            {
                                <img src="@Company.CompanyLogo" alt="Company Logo" style="max-width: 100px; max-height: 100px;" />
                            }

                                       
                        </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary">@ButtonText</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    [Parameter] public Company Company { get; set; } 
    [Parameter] public string Title { get; set; } = "Add Company";
    [Parameter] public string ButtonText { get; set; } = "Add";
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    // [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback<IBrowserFile?> OnSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnSubmit.InvokeAsync(file);
    }

    private async Task CloseModal() => await OnClose.InvokeAsync();
    private IBrowserFile? file;



    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    
    {
        var file = e.File;
        try
        {
            // using var stream = file.OpenReadStream(10 * 1024 * 1024); // 10 MB
            // using var ms = new MemoryStream();
            // await stream.CopyToAsync(ms);
            // var bytes = ms.ToArray();
            // var base64 = Convert.ToBase64String(bytes);
            // Company.CompanyLogo = $"data:{file.ContentType};base64,{base64}";
            // using var content = new MultipartFormDataContent();

            // content.Add(new StringContent(Company.CompanyLogo ?? ""), "CompanyLogo");
            // if (file != null)
            // {
            //    var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}"; // Unique naam de diya
            //    var fileStream = file.OpenReadStream(10485760); // Max 10MB
            //    var fileContent = new StreamContent(fileStream);
            //    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            //    content.Add(fileContent, "CompanyLogo", fileName);

            //     Company.CompanyLogo = fileName; // ✅ Database me file ka naam store hoga
            // }
             // if (file != null)
             //    {
             //       var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
             //       var stream = file.OpenReadStream(10485760); // 10MB max
             //       var fileContent = new StreamContent(stream);
             //       fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
             //       content.Add(fileContent, "CompanyLogo", fileName);

             //       company.CompanyLogo = fileName;
             //    }
            if (file != null)
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                var stream = file.OpenReadStream(10 * 1024 * 1024);
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
               

                Company.CompanyLogo = fileName; // Just keeping it in sync if needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Image load failed: {ex.Message}");
        }

    }
  
}