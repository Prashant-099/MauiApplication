@page "/cargo-list"
@using Models
@using Services
@inject CargoService CargoService
@inject IJSRuntime JS

<h3>Cargo List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

else
{
   @*  <div class="mb-3">
        <input type="text" placeholder="Search Cargo Name" @bind="filterCargoName" class="form-control" />
        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
        <button class="btn btn-success mt-2" @onclick="ShowAddModal">Add Cargo</button>
    </div> *@
    <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
        <input type="text" placeholder="Search Name" @bind="filterCargoName" @bind:event="oninput" style="width:80%;" class="form-control" />
        <button class="rounded-circle d-flex align-items-center justify-content-center"
                style="width: 40px; height: 40px;" @onclick="ShowAddModal">
            <img src="Icon/add.png" style="height:20px;" />
        </button>
        <div class="dropdown mb-3">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Choose Columns
            </button>
            <ul class="dropdown-menu p-3" style="min-width: 250px;">
                @foreach (var column in columnVisibility.Keys.ToList())
                {
                    <li class="form-check mb-1">
                        <input class="form-check-input"
                               type="checkbox"
                               id="@column"
                               checked="@columnVisibility[column]"
                               @onchange="() => ToggleColumn(column)" />
                        <label class="form-check-label" for="@column">@column</label>
                    </li>
                }
            </ul>
        </div>

    </div>
    <div class="table-responsive">
        <table class="table-striped table">
            <thead>
                <tr>
                    @if (columnVisibility["CargoName"])
                    {
                        <th>Cargo Name</th>
                    }
                    @if (columnVisibility["CargoType"])
                    {
                        <th>Cargo Type</th>
                    }
                    @if (columnVisibility["CargoRemarks"])
                    {
                        <th>Remarks</th>
                    }
                    @if (columnVisibility["Actions"])
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>

        @if (cargos == null || !cargos.Any())
        {
            <div class="no-data-message" style="text-align:center;left:300px; position:relative; font-weight: bold; margin-top: 20px; color:red">
                <p>No cargos available.</p>
            </div>
        
        }
        else{
       <tbody>
    @foreach (var cargo in FilteredGrids)
    {
        <tr>
            @if (columnVisibility["CargoName"])
            {
                <td>@cargo.CargoName</td>
            }
            @if (columnVisibility["CargoType"])
            {
                <td>@cargo.CargoType</td>
            }
            @if (columnVisibility["CargoRemarks"])
            {
                <td>@cargo.CargoRemarks</td>
            }
            @if (columnVisibility["Actions"])
            {
                <td>
                    <button @onclick="() => ShowEditModal(cargo)">
                        <img src="Icon/icons8-edit-50.png" style="height:25px" />
                    </button>
                    <button @onclick="() => ConfirmDelete(cargo.CargoId)">
                        <img src="Icon/icons8-delete-50.png" style="height:25px" />
                    </button>
                </td>
            }
        </tr>
    }
</tbody>


        }
    </table>
    </div>
    <!-- Pagination Controls -->
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

<CargoAddEdit Cargo="selectedCargo"
              Title="@modalTitle"
              ButtonText="@modalButtonText"
              IsVisible="@isModalVisible"
              OnClose="CloseModal"
              OnSubmit="SaveCargo" />

@code {
    // Add this dictionary to control which columns are visible
    private Dictionary<string, bool> columnVisibility = new()
    {
        { "CargoName", true },
        { "CargoType", true },
        { "CargoRemarks", true },
        { "Actions", true }
    };

    private void ToggleColumn(string column)
    {
        columnVisibility[column] = !columnVisibility[column];
    }


    private List<Cargo> cargos = new();
    private List<Cargo> cargosSearch = new();
    private Cargo selectedCargo = new Cargo();
    private string modalTitle = string.Empty;
    private string modalButtonText = string.Empty;
    private bool isModalVisible = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterCargoName = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;
    private IEnumerable<Cargo> FilteredGrids =>
    string.IsNullOrWhiteSpace(filterCargoName)
    ? cargos
    : cargos.Where(c =>
        (!string.IsNullOrEmpty(c.CargoName) && c.CargoName.Contains(filterCargoName, StringComparison.OrdinalIgnoreCase))
    );
    // Sorting variables
    private string sortColumn = "CargoId";
    private bool isSortDescending = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCargos();
    }

    private async Task LoadCargos()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await CargoService.GetCargosAsync(currentPage, pageSize);
            cargos = response.Cargos;
            totalPages = response.TotalPages;

            //for search
            var Search = await CargoService.GetCargoslistAsync();
            cargosSearch = Search.Cargos;
         
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cargos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to the first page when filters are applied
        await LoadCargos();
    }

    private void ShowAddModal()
    {
        selectedCargo = new Cargo();
        modalTitle = "Add Cargo";
        modalButtonText = "Add";
        isModalVisible = true;
    }

    private void ShowEditModal(Cargo cargo)
    {
        selectedCargo = new Cargo
            {
                CargoId = cargo.CargoId,
                CargoName = cargo.CargoName,
                CargoType = cargo.CargoType,
                CargoRemarks = cargo.CargoRemarks
            };
        modalTitle = "Edit Cargo";
        modalButtonText = "Save";
        isModalVisible = true;
    }

    private async Task SaveCargo()
    {
        try
        {
            if (selectedCargo.CargoId == 0) // Add new cargo
            {
                await CargoService.AddCargoAsync(selectedCargo);
            }
            else // Update existing cargo
            {
                await CargoService.UpdateCargoAsync(selectedCargo);
            }

            await LoadCargos(); // Refresh the list
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving cargo: {ex.Message}";
        }
    }

    private async Task ConfirmDelete(int cargoId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this cargo?");
        if (isConfirmed)
        {
            try
            {
                await CargoService.DeleteCargoAsync(cargoId);
                cargos = cargos.Where(c => c.CargoId != cargoId).ToList();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting cargo: {ex.Message}";
            }
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task ApplySorting(string column)
    {
        if (sortColumn == column)
        {
            isSortDescending = !isSortDescending; // Toggle sort direction
        }
        else
        {
            sortColumn = column;
            isSortDescending = false; // Default to ascending for a new column
        }

        currentPage = 1; // Reset to the first page on sorting
        await LoadCargos();
    }

    // Pagination logic
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            await LoadCargos();
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            await LoadCargos();
        }
    }
}
    <style>
    

    </style>